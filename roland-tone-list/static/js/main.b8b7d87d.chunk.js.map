{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","jsonFile","filter","setFilter","search","setSearch","JSON","parse","localStorage","getItem","localStars","setLocalStars","useEffect","console","log","jsonFilter","item","name","toLowerCase","includes","className","map","id","el","number","category","type","onClick","stars","parser","findIndex","e","splice","setItem","stringify","removeNewStar","value","onChange","target","push","addedNewStar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OA4IeA,MAxIf,WAAgB,IAAD,EACeC,mBAASC,GADxB,mBACNC,EADM,KACEC,EADF,OAEeH,mBAAS,IAFxB,mBAENI,EAFM,KAEEC,EAFF,OAGuBL,mBAClCM,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAJlC,mBAGNC,EAHM,KAGMC,EAHN,KAmDb,OA5CAC,qBAAU,WAER,GADAC,QAAQC,IAAIV,IACPA,EAGH,OAFAD,EAAUF,QACVY,QAAQC,IAAI,QAId,IAAMC,EAAad,EAASC,QAAO,SAACc,GAAD,OACjCA,EAAKC,KAAKC,cAAcC,SAASf,MAEnCD,EAAUY,KACT,CAACX,IAiCF,sBAAKgB,UAAU,sBAAf,UACE,gCACE,uCACA,wBAAOA,UAAU,QAAjB,UACE,gCACE,+BACE,mCACA,2CACA,wCACA,2CACA,4BAGJ,gCACGV,GACCA,EAAWW,KAAI,SAACC,GAAD,OACbrB,EAASoB,KACP,SAACE,GAAD,OACEA,EAAGC,SAAWF,GACZ,+BACE,6BAAKC,EAAGD,KACR,6BAAKC,EAAGC,SACR,6BAAKD,EAAGN,OACR,6BAAKM,EAAGE,WACR,6BACE,wBACEC,KAAK,SACLN,UAAU,kBACVO,QAAS,kBAzCnC,SAAuBL,GACrB,IAAMM,EAAQpB,aAAaC,QAAQ,SAE7BoB,EAASvB,KAAKC,MAAMqB,GACpBE,EAAYD,EAAOC,WAAU,SAACC,GAAD,OAAOA,IAAMT,KAC5CQ,GAAa,IACfD,EAAOG,OAAOF,EAAW,GACzBtB,aAAayB,QAAQ,QAAS3B,KAAK4B,UAAUL,IAC7ClB,EAAc,YAAIkB,KAiCmBM,CAAcZ,EAAGC,SAHlC,wBANJ,UAAYD,EAAGC,OAAf,YAAyBD,EAAGD,GAA5B,YAAkCC,EAAGN,KAArC,wBAqBhB,uCACA,uBACEG,UAAU,eACVgB,MAAOhC,EACPiC,SAAU,SAACN,GAAD,OAAO1B,EAAU0B,EAAEO,OAAOF,UAEtC,uBACA,gCACE,2CACA,wBAAOhB,UAAU,QAAjB,UACE,gCACE,+BACE,2CACA,wCACA,2CACA,4BAGJ,gCACGlB,EAAOmB,KAAI,SAACE,GAAD,OACV,+BACE,6BAAKA,EAAGC,SACR,6BAAKD,EAAGN,OACR,6BAAKM,EAAGE,WACR,8BACIf,EAAWS,SAASI,EAAGC,SACvB,wBACEE,KAAK,SACLN,UAAU,kBACVO,QAAS,kBApG7B,SAAsBL,GACpB,IAAMM,EAAQpB,aAAaC,QAAQ,SAEnC,IAAKmB,EAGH,OAFAjB,EAAc,GAAD,mBAAKD,GAAL,CAAiBY,KAEvBd,aAAayB,QAAQ,QAArB,YAAmCX,EAAnC,OAGT,IAAMO,EAASvB,KAAKC,MAAMqB,GAErBC,EAAOV,SAASG,KACnBO,EAAOU,KAAKjB,GACZd,aAAayB,QAAQ,QAAS3B,KAAK4B,UAAUL,IAC7ClB,EAAc,GAAD,mBAAKD,GAAL,CAAiBY,MAsFCkB,CAAajB,EAAGC,SAHjC,sBANN,UAAYD,EAAGC,OAAf,YAAyBD,EAAGD,GAA5B,YAAkCC,EAAGN,sBCxGpCwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b8b7d87d.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport \"./App.css\";\nimport jsonFile from \"./myjsonfile.json\";\n\nfunction App() {\n  const [filter, setFilter] = useState(jsonFile);\n  const [search, setSearch] = useState(\"\");\n  const [localStars, setLocalStars] = useState(\n    JSON.parse(localStorage.getItem(\"stars\")) || []\n  );\n\n  useEffect(() => {\n    console.log(search);\n    if (!search) {\n      setFilter(jsonFile);\n      console.log(\"aqui\");\n      return;\n    }\n\n    const jsonFilter = jsonFile.filter((item) =>\n      item.name.toLowerCase().includes(search)\n    );\n    setFilter(jsonFilter);\n  }, [search]);\n\n  function addedNewStar(id) {\n    const stars = localStorage.getItem(\"stars\");\n\n    if (!stars) {\n      setLocalStars([...localStars, id]);\n\n      return localStorage.setItem(\"stars\", `[\"${id}\"]`);\n    }\n\n    const parser = JSON.parse(stars);\n\n    if (!parser.includes(id)) {\n      parser.push(id);\n      localStorage.setItem(\"stars\", JSON.stringify(parser));\n      setLocalStars([...localStars, id]);\n    }\n  }\n\n  function removeNewStar(id) {\n    const stars = localStorage.getItem(\"stars\");\n\n    const parser = JSON.parse(stars);\n    const findIndex = parser.findIndex((e) => e === id);\n    if (findIndex > -1) {\n      parser.splice(findIndex, 1);\n      localStorage.setItem(\"stars\", JSON.stringify(parser));\n      setLocalStars([...parser]);\n    }\n  }\n\n  return (\n    <div className=\"App container-fluid\">\n      <div>\n        <h3>Stars</h3>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Número</th>\n              <th>Timbre</th>\n              <th>Categoria</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {localStars &&\n              localStars.map((id) =>\n                jsonFile.map(\n                  (el) =>\n                    el.number === id && (\n                      <tr key={`${el.number}-${el.id}-${el.name}-star`}>\n                        <td>{el.id}</td>\n                        <td>{el.number}</td>\n                        <td>{el.name}</td>\n                        <td>{el.category}</td>\n                        <td>\n                          <button\n                            type=\"button\"\n                            className=\"btn btn-default\"\n                            onClick={() => removeNewStar(el.number)}\n                          >\n                            remove\n                          </button>\n                        </td>\n                      </tr>\n                    )\n                )\n              )}\n          </tbody>\n        </table>\n      </div>\n      <p>Buscar</p>\n      <input\n        className=\"form-control\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n      />\n      <br />\n      <div>\n        <h3>Tone list</h3>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>Número</th>\n              <th>Timbre</th>\n              <th>Categoria</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {filter.map((el) => (\n              <tr key={`${el.number}-${el.id}-${el.name}`}>\n                <td>{el.number}</td>\n                <td>{el.name}</td>\n                <td>{el.category}</td>\n                <td>\n                  {!localStars.includes(el.number) && (\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-default\"\n                      onClick={() => addedNewStar(el.number)}\n                    >\n                      star\n                    </button>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}